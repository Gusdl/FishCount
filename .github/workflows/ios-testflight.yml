name: iOS TestFlight CI

on:
  push: { branches: [ main ] }
  workflow_dispatch:

env:
  # üëâ HIER anpassen
  SCHEME: Fischbestand
  TEAM_ID: XDLCKT3P87         # z.B. ABC123DEF4
  BUNDLE_ID: com.simonmaiwald.fischbestand     # z.B. com.gusdl.fischbestand

jobs:
  build-and-upload:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: "15.4" }

      # Optional: falls die .xcscheme "ArchiveAction" auf Debug steht -> auf Release patchen
      - name: Force Scheme ArchiveAction to Release
        run: |
          set -euxo pipefail
          for f in $(find . -path "*/xcshareddata/xcschemes/*.xcscheme" 2>/dev/null); do
            sed -i '' 's#<ArchiveAction[^>]*buildConfiguration="[^"]*"#<ArchiveAction buildConfiguration="Release"#' "$f" || true
          done

      # AppIcon-Platzhalter erzeugen (iPhone + 1024 Marketing), ohne externe Dateien
      - name: Ensure AppIcon exists (placeholder, no system deps)
        run: |
          set -euxo pipefail
          PROJECT_DIR=$(dirname "$(find . -maxdepth 2 -name '*.xcodeproj' | head -n1)")
          ICONSET="$PROJECT_DIR/Resources/Assets.xcassets/AppIcon.appiconset"
          mkdir -p "$ICONSET"
          # 1x1 wei√ües PNG als Base64 -> auf 1024 skalieren
          echo iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAwMB/UZz3QAAAABJRU5ErkJggg== | base64 -d > "$ICONSET/_base.png"
          /usr/bin/sips -s format png --resampleWidth 1024 "$ICONSET/_base.png" --out "$ICONSET/Icon-1024.png"
          # iPhone: 20/29/40/60 @2x/@3x
          for size in 20 29 40 60; do
            for scale in 2 3; do
              px=$((size*scale))
              /usr/bin/sips -s format png --resampleWidth $px "$ICONSET/Icon-1024.png" --out "$ICONSET/Icon-iphone-${size}x${size}@${scale}x.png"
            done
          done
          # Contents.json (iPhone + Marketing)
          cat > "$ICONSET/Contents.json" << 'JSON'
          { "images": [
            { "idiom":"iphone","size":"20x20","scale":"2x","filename":"Icon-iphone-20x20@2x.png" },
            { "idiom":"iphone","size":"20x20","scale":"3x","filename":"Icon-iphone-20x20@3x.png" },
            { "idiom":"iphone","size":"29x29","scale":"2x","filename":"Icon-iphone-29x29@2x.png" },
            { "idiom":"iphone","size":"29x29","scale":"3x","filename":"Icon-iphone-29x29@3x.png" },
            { "idiom":"iphone","size":"40x40","scale":"2x","filename":"Icon-iphone-40x40@2x.png" },
            { "idiom":"iphone","size":"40x40","scale":"3x","filename":"Icon-iphone-40x40@3x.png" },
            { "idiom":"iphone","size":"60x60","scale":"2x","filename":"Icon-iphone-60x60@2x.png" },
            { "idiom":"iphone","size":"60x60","scale":"3x","filename":"Icon-iphone-60x60@3x.png" },
            { "idiom":"ios-marketing","size":"1024x1024","scale":"1x","filename":"Icon-1024.png" }
          ], "info": { "version":1, "author":"xcode" } }
          JSON

      # Code Signing: Zertifikat installieren
      - name: Install certificates
        env:
          P12_BASE64: ${{ secrets.CERT_P12 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          set -euxo pipefail
          KEYCHAIN=$RUNNER_TEMP/app.keychain-db
          security create-keychain -p "" $KEYCHAIN
          security default-keychain -s $KEYCHAIN
          security unlock-keychain -p "" $KEYCHAIN
          echo "$P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -P "$P12_PASSWORD" -A -t agg -f pkcs12 -k $KEYCHAIN
          security set-key-partition-list -S apple-tool:,apple: -s -k "" $KEYCHAIN

      # Code Signing: Provisioning Profile installieren
      - name: Install provisioning profile
        env: { MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION }} }
        run: |
          set -euxo pipefail
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      # (Optional) Buildnummer automatisch erh√∂hen, wenn du CURRENT_PROJECT_VERSION nutzt
      # - name: Bump build number
      #   run: |
      #     PROJ=$(find . -name "*.xcodeproj" | head -n1)
      #     INFOPLIST=$(xcodebuild -showBuildSettings -project "$PROJ" -scheme "$SCHEME" -json | /usr/bin/python3 - <<'PY'
      # import json,sys; j=json.load(sys.stdin); print(j[0]["buildSettings"]["INFOPLIST_FILE"])
      # PY
      #     )
      #     /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $GITHUB_RUN_NUMBER" "$INFOPLIST"

      # Device-Archive (Release, iphoneos) ‚Äì iPhone-only & AppIcon-Namen erzwingen
      - name: Archive (device, Release)
        run: |
          set -euxo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -sdk iphoneos \
            -archivePath $PWD/build/$SCHEME.xcarchive \
            archive \
            DEVELOPMENT_TEAM=${TEAM_ID} \
            PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} \
            ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon \
            TARGETED_DEVICE_FAMILY=1 \
            -allowProvisioningUpdates

      - name: Export IPA
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
          </dict></plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath $PWD/build/$SCHEME.xcarchive \
            -exportPath  $PWD/build \
            -exportOptionsPlist ExportOptions.plist
          ls -la build

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with: { ruby-version: '3.2', bundler-cache: true }

      - name: Install fastlane
        run: gem install fastlane

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_KEY_ID:     ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID:  ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY:    ${{ secrets.ASC_API_KEY_CONTENTS }}
        run: |
          cat > Fastfile <<'RUBY'
          default_platform(:ios)
          platform :ios do
            lane :beta do
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
                key_content: ENV["APP_STORE_CONNECT_API_KEY"]
              )
              pilot(api_key: api_key, ipa: "build/#{ENV['SCHEME']}.ipa", skip_waiting_for_build_processing: true)
            end
          end
          RUBY
          fastlane ios beta